// Generated by CoffeeScript 1.8.0
(function() {
  var module, root;

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  root.TastyResourceFactory = (function() {
    function TastyResourceFactory($http, $cacheFactory, _config, _fields) {
      var _base;
      this.$http = $http;
      this.$cacheFactory = $cacheFactory;
      this._config = _config;
      this._fields = _fields != null ? _fields : {};
      (_base = this._config).cache || (_base.cache = false);
      this._resolved = true;
      if (this._config.cache) {
        this._cache = this.$cacheFactory.get(this._config.url) || this.$cacheFactory(this._config.url);
      } else {
        this._cache = null;
      }
    }

    TastyResourceFactory.prototype.queryURL = function(url, parameters, success, error) {
      var attr, params, promise, results, value;
      results = [];
      params = [];
      for (attr in parameters) {
        value = parameters[attr];
        params.push("" + attr + "=" + value);
      }
      if (params.length > 0) {
        url = "" + url + "?" + (params.join('&'));
      }
      this._resolved = false;
      promise = this.$http.get(url, {
        cache: this._config.cache
      });
      promise.then((function(_this) {
        return function(response) {
          var object, resource, _i, _len, _ref;
          if (response.data.objects != null) {
            _ref = response.data.objects;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              object = _ref[_i];
              resource = _this._create_resource(object);
              if (_this._cache) {
                _this._cache.put(object.id, resource);
              }
              results.push(resource);
            }
            return results.meta = response.data.meta;
          } else {
            return angular.copy(response.data, results);
          }
        };
      })(this));
      promise.then((function(_this) {
        return function() {
          return _this._resolved = true;
        };
      })(this));
      promise.then(success, error);
      return results;
    };

    TastyResourceFactory.prototype.query = function(filter, success, error) {
      return this.queryURL(this._config.url, filter, success, error);
    };

    TastyResourceFactory.prototype.search = function(filter, success, error) {
      return this.queryURL("" + this._config.url + "search/", filter, success, error);
    };

    TastyResourceFactory.prototype.force_get = function(id, success, error) {
      return this.get(id, success, error, false);
    };

    TastyResourceFactory.prototype.get = function(id, success, error, use_cache) {
      var promise, resource, url;
      if (use_cache == null) {
        use_cache = true;
      }
      if (use_cache) {
        resource = this._config.cache ? this._cache.get(id) : null;
      } else {
        resource = null;
      }
      if (!resource) {
        url = this._get_detail_url(id);
        resource = new TastyResourceFactory(this.$http, this.$cacheFactory, this._config, this._fields);
        this._resolved = false;
        promise = this.$http.get(url, {
          cache: this._config.cache
        });
        promise.then((function(_this) {
          return function(response) {
            var key, value, _ref;
            _ref = response.data;
            for (key in _ref) {
              value = _ref[key];
              resource[key] = value;
            }
            if (_this._cache) {
              return _this._cache.put(id, resource);
            }
          };
        })(this));
        promise.then((function(_this) {
          return function() {
            return _this._resolved = true;
          };
        })(this));
        promise.then(success, error);
      }
      return resource;
    };

    TastyResourceFactory.prototype.post = function() {
      var promise;
      this._resolved = false;
      promise = this.$http.post(this._config.url, this._get_data());
      promise.then((function(_this) {
        return function() {
          return _this._resolved = true;
        };
      })(this));
      promise.success((function(_this) {
        return function(response, status, headers) {
          return _this._config.detail_url = headers("Location");
        };
      })(this));
      return promise;
    };

    TastyResourceFactory.prototype.put = function(id) {
      var promise, url;
      url = this._get_detail_url(id);
      this._resolved = false;
      promise = this.$http.put(url, this._get_data());
      promise.then((function(_this) {
        return function() {
          return _this._resolved = true;
        };
      })(this));
      return promise;
    };

    TastyResourceFactory.prototype.patch = function(id, data) {
      var promise, url;
      url = this._get_detail_url(id);
      this._resolved = false;
      promise = this.$http({
        method: "PATCH",
        url: url,
        data: data
      });
      promise.then((function(_this) {
        return function() {
          return _this._resolved = true;
        };
      })(this));
      return promise;
    };

    TastyResourceFactory.prototype.resolved = function() {
      return this._resolved;
    };

    TastyResourceFactory.prototype._get_detail_url = function(id) {
      var url;
      url = this._config.url;
      if (id == null) {
        id = this.id;
      }
      if (id && id[0] === "/") {
        this._config.detail_url = id;
      } else {
        this._config.detail_url = "" + this._config.url + id + "/";
      }
      return this._config.detail_url;
    };

    TastyResourceFactory.prototype._get_data = function() {
      var attr, data, value, _ref;
      data = {};
      for (attr in this) {
        value = this[attr];
        if (typeof value !== "function" && ((_ref = attr[0]) !== "$" && _ref !== "_")) {
          if (value instanceof TastyResourceFactory) {
            data[attr] = value.resource_uri;
          } else {
            data[attr] = value;
          }
        }
      }
      return data;
    };

    TastyResourceFactory.prototype._create_resource = function(data) {
      var RelatedResource, key, related_id, resource, value;
      resource = new TastyResourceFactory(this.$http, this.$cacheFactory, this._config, this._fields);
      for (key in data) {
        value = data[key];
        if (this._fields[key]) {
          RelatedResource = this._fields[key];
          related_id = data["" + key + "_id"];
          resource["get_" + key] = function() {
            return RelatedResource.get(related_id);
          };
        }
        resource[key] = value;
      }
      return resource;
    };

    return TastyResourceFactory;

  })();

  module = angular.module("tastyResource", []);

  module.factory("TastyResource", [
    "$http", "$cacheFactory", function($http, $cacheFactory) {
      return function(config, fields) {
        return new TastyResourceFactory($http, $cacheFactory, config, fields);
      };
    }
  ]);

  module.factory("TastyFields", function() {
    return function() {
      return new TastyFields();
    };
  });

}).call(this);
